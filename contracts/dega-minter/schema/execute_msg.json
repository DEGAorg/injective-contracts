{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "mint"
      ],
      "properties": {
        "mint": {
          "type": "object",
          "required": [
            "request",
            "signature"
          ],
          "properties": {
            "request": {
              "$ref": "#/definitions/MintRequest"
            },
            "signature": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_settings"
      ],
      "properties": {
        "update_settings": {
          "type": "object",
          "required": [
            "settings"
          ],
          "properties": {
            "settings": {
              "$ref": "#/definitions/DegaMinterConfigSettings"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_admin"
      ],
      "properties": {
        "update_admin": {
          "type": "object",
          "required": [
            "address",
            "command"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "command": {
              "$ref": "#/definitions/UpdateAdminCommand"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_start_trading_time"
      ],
      "properties": {
        "update_start_trading_time": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "DegaMinterConfigSettings": {
      "type": "object",
      "required": [
        "burning_paused",
        "minting_paused",
        "signer_pub_key",
        "transferring_paused"
      ],
      "properties": {
        "burning_paused": {
          "type": "boolean"
        },
        "minting_paused": {
          "type": "boolean"
        },
        "signer_pub_key": {
          "type": "string"
        },
        "transferring_paused": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "MintRequest": {
      "type": "object",
      "required": [
        "currency",
        "price",
        "primary_sale_recipient",
        "royalty_bps",
        "royalty_recipient",
        "to",
        "uid",
        "uri",
        "validity_end_timestamp",
        "validity_start_timestamp"
      ],
      "properties": {
        "currency": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Uint256"
        },
        "primary_sale_recipient": {
          "type": "string"
        },
        "royalty_bps": {
          "$ref": "#/definitions/Uint256"
        },
        "royalty_recipient": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "uid": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "uri": {
          "type": "string"
        },
        "validity_end_timestamp": {
          "$ref": "#/definitions/Uint128"
        },
        "validity_start_timestamp": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "UpdateAdminCommand": {
      "type": "string",
      "enum": [
        "add",
        "remove"
      ]
    }
  }
}
